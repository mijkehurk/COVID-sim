globals
[
  #infected-times-ticks
  #delivered-supply-proposed-this-tick
  when-has-2%-infected-threshold-first-been-met?
  when-has-5%-infected-threshold-first-been-met?
  #contacts-last-tick
  
  first-infected-people
  #first-infected-people;;needed as infected people can die
  #infected-by-first-infected-people
  #infected-by-asymptomatic-people
  #people-infected-in-pubtrans
  #people-infected-in-shared-cars
  #people-infected-in-queuing
  #people-infected-in-general-travel
  #people-infected-in-hospitals
  #people-infected-in-workplaces
  #people-infected-in-homes
  #people-infected-in-public-leisure
  #people-infected-in-private-leisure
  #people-infected-in-schools
  #people-infected-in-universities
  #people-infected-in-essential-shops
  #people-infected-in-non-essential-shops
  
  age-group-to-age-group-#contacts-table
  age-group-to-age-group-#infections-last-tick-table
  
  #contacts-in-pubtrans
  #contacts-in-shared-cars
  #contacts-in-queuing
  #contacts-in-general-travel
  #contacts-in-hospitals
  #contacts-in-workplaces
  #contacts-in-homes
  #contacts-in-public-leisure
  #contacts-in-private-leisure
  #contacts-in-schools
  #contacts-in-universities
  #contacts-in-essential-shops
  #contacts-in-non-essential-shops
  
  #cumulative-youngs-infected
  #cumulative-students-infected
  #cumulative-workers-infected
  #cumulative-retireds-infected
  
  #cumulative-youngs-infector
  #cumulative-students-infector
  #cumulative-workers-infector
  #cumulative-retireds-infector
  
  #youngs-at-start
  #students-at-start
  #workers-at-start
  #retireds-at-start
  
  #hospitalizations-youngs-this-tick
  #hospitalizations-students-this-tick
  #hospitalizations-workers-this-tick
  #hospitalizations-retired-this-tick
  
  number-of-people-per-age-having-ever-reached-severe-table
  contamination-network-table
  #infected-people-per-ticks
  #hospitalized-per-tick
]

to-report ratio-infected
  report #infected / count people
end

to-report ratio-infected-youngs
  if #youngs-at-start > 0[  report #cumulative-youngs-infected / #youngs-at-start]
  report 0
end

to-report ratio-infected-students
  if #students-at-start > 0 [report #cumulative-students-infected / #students-at-start]
  report 0
end

to-report ratio-infected-workers
  if #workers-at-start > 0 [report #cumulative-workers-infected / #workers-at-start]
  report 0
end

to-report ratio-infected-retireds
  if #retireds-at-start > 0 [report #cumulative-retireds-infected / #retireds-at-start]
  report 0
end

to-report total-amount-of-capital-in-the-system
  report sum [my-amount-of-capital] of people + sum [amount-of-capital] of gathering-points + government-reserve-of-capital
end

to update-metrics
  set #infected-times-ticks #infected-times-ticks + #infected
  
  if ratio-infected > 0.02 and when-has-2%-infected-threshold-first-been-met? = "never"
  [set when-has-2%-infected-threshold-first-been-met? ticks]

  if ratio-infected > 0.05 and when-has-5%-infected-threshold-first-been-met? = "never"
  [set when-has-5%-infected-threshold-first-been-met? ticks]

end

to reset-metrics
  set #admissions-last-tick 0 
  set  #delivered-supply-proposed-this-tick 0
  set #contacts-last-tick 0
  
  set #contacts-in-pubtrans 0
  set #contacts-in-shared-cars 0
  set #contacts-in-queuing 0
  set #contacts-in-general-travel 0
  set #contacts-in-hospitals 0
  set #contacts-in-workplaces 0
  set #contacts-in-homes 0
  set #contacts-in-public-leisure 0
  set #contacts-in-private-leisure 0
  set #contacts-in-schools 0
  set #contacts-in-universities 0
  set #contacts-in-essential-shops 0
  set #contacts-in-non-essential-shops 0
  
  set #hospitalizations-youngs-this-tick 0
  set #hospitalizations-students-this-tick 0
  set #hospitalizations-workers-this-tick 0
  set #hospitalizations-retired-this-tick 0
  
  ;;reset age-group-to-age-group-#contacts-table
  foreach all-ages [ [x] -> foreach all-ages [ [y] -> table:put age-group-to-age-group-#contacts-table (list x y) 0]]
  foreach all-ages [ [x] -> foreach all-ages [ [y] -> table:put age-group-to-age-group-#infections-last-tick-table (list x y) 0]]
  
  set #infected-people-per-ticks lput #infected #infected-people-per-ticks
  set  #hospitalized-per-tick lput #taken-hospital-beds   #hospitalized-per-tick    
end

to increment-age-infection-information-metrics [infected infector]
  if [age = young-age] of infected [set #cumulative-youngs-infected #cumulative-youngs-infected + 1]
  if [age = student-age] of infected [set #cumulative-students-infected #cumulative-students-infected + 1]
  if [age = worker-age] of infected [set #cumulative-workers-infected #cumulative-workers-infected + 1]
  if [age = retired-age] of infected [set #cumulative-retireds-infected #cumulative-retireds-infected + 1]
  
  if [age = young-age] of infector [set #cumulative-youngs-infector #cumulative-youngs-infector + 1]
  if [age = student-age] of infector [set #cumulative-students-infector #cumulative-students-infector + 1]
  if [age = worker-age] of infector [set #cumulative-workers-infector #cumulative-workers-infector + 1]
  if [age = retired-age] of infector [set #cumulative-retireds-infector #cumulative-retireds-infector + 1]  
end

to increment-hospitalizations-global-metrics
  if age = young-age [set #hospitalizations-youngs-this-tick #hospitalizations-youngs-this-tick + 1]
  if age = student-age [set #hospitalizations-students-this-tick #hospitalizations-students-this-tick + 1]
  if age = worker-age [set #hospitalizations-workers-this-tick #hospitalizations-workers-this-tick + 1]
  if age = retired-age [set #hospitalizations-retired-this-tick #hospitalizations-retired-this-tick + 1]
end

to-report #people-at-start
  report #youngs-at-start + #workers-at-start + #students-at-start + #retireds-at-start
end

to-report ratio-of-workers-at-start
  report #workers-at-start / #people-at-start
end

to-report ratio-of-students-at-start
  report #students-at-start / #people-at-start
end

to-report ratio-of-retireds-at-start
  report #retireds-at-start / #people-at-start
end
  

to-report ratio-of-youngs-at-start
  report #youngs-at-start / #people-at-start
end


to-report ratio-age-group-to-age-group-#infections [infector-age infected-age]
  report table:get age-group-to-age-group-#infections-last-tick-table (list infector-age infected-age) / #initial-people-with-age infected-age
end

to add-to-contagion-tree [infector infectee context]
  if contamination-network-table = 0 [set contamination-network-table table:make] 
  let key infector
  ifelse infector != nobody 
  [set key [who] of infector]
  [set key "nobody"]
  
  if not table:has-key? contamination-network-table key [table:put contamination-network-table key (list)]
  table:put contamination-network-table key lput (list [who] of infectee ticks context)  table:get contamination-network-table key
end


to increment-contagion-metrics-from [context infected infector]
  increment-age-infection-information-metrics infected infector
  
  let key (list [age] of infector [age] of infected)
  table:put age-group-to-age-group-#infections-last-tick-table key table:get age-group-to-age-group-#infections-last-tick-table key + 1  
  
    if is-gathering-point? context [
    let gt [gathering-type] of context
    if gt = hospital-gathering-type [set #people-infected-in-hospitals #people-infected-in-hospitals + 1 stop]
    if gt = workplace-gathering-type [set #people-infected-in-workplaces  #people-infected-in-workplaces + 1 stop]
    if gt = home-gathering-type [set #people-infected-in-homes #people-infected-in-homes + 1 stop]
    if gt = public-leisure-gathering-type [set #people-infected-in-public-leisure #people-infected-in-public-leisure + 1 stop]
    if gt = private-leisure-gathering-type [set #people-infected-in-private-leisure #people-infected-in-private-leisure + 1 stop]  
    if gt = school-gathering-type [set #people-infected-in-schools #people-infected-in-schools + 1 stop]  
    if gt = university-gathering-type [set #people-infected-in-universities #people-infected-in-universities + 1 stop]  
    if gt = essential-shop-gathering-type [set #people-infected-in-essential-shops #people-infected-in-essential-shops + 1 stop]  
    if gt = non-essential-shop-gathering-type [set #people-infected-in-non-essential-shops #people-infected-in-non-essential-shops + 1 stop]
  ]
  
  if context = "bus" [set #people-infected-in-pubtrans #people-infected-in-pubtrans + 1 stop]
  if context = "queue-waiting-for-bus" [set #people-infected-in-queuing #people-infected-in-queuing + 1 stop]
  if context = "cars" [set #people-infected-in-shared-cars #people-infected-in-shared-cars + 1 stop]
  if context = "travelling outside" [set #people-infected-in-general-travel #people-infected-in-general-travel + 1 stop]
  error (sentence "unimplemented for" context)
end

to increment-#contacts-per-gathering-type-global-metrics [ts context]
  let #contacts-now (count ts * (count ts - 1)) / 2
  if is-gathering-point? context [
    let gt [gathering-type] of context
    
    if gt = hospital-gathering-type [set #contacts-in-hospitals #contacts-in-hospitals + #contacts-now stop]
    if gt = workplace-gathering-type [set #contacts-in-workplaces  #contacts-in-workplaces + #contacts-now stop]
    if gt = home-gathering-type [set #contacts-in-homes #contacts-in-homes + #contacts-now stop]
    if gt = public-leisure-gathering-type [set #contacts-in-public-leisure #contacts-in-public-leisure + #contacts-now stop]
    if gt = private-leisure-gathering-type [set #contacts-in-private-leisure #contacts-in-private-leisure + #contacts-now stop]  
    if gt = school-gathering-type [set #contacts-in-schools #contacts-in-schools + #contacts-now stop]  
    if gt = university-gathering-type [set #contacts-in-universities #contacts-in-universities + #contacts-now stop]  
    if gt = essential-shop-gathering-type [set #contacts-in-essential-shops #contacts-in-essential-shops + #contacts-now stop]  
    if gt = non-essential-shop-gathering-type [set #contacts-in-non-essential-shops #contacts-in-non-essential-shops + #contacts-now stop]  
  ]
  if context = "bus" [set #contacts-in-pubtrans #contacts-in-pubtrans + #contacts-now stop]
  if context = "queue-waiting-for-bus" [set #contacts-in-queuing #contacts-in-queuing + #contacts-now stop]
  if context = "cars" [set #contacts-in-shared-cars #contacts-in-shared-cars + #contacts-now stop]
  if context = "travelling outside" [set #contacts-in-general-travel #contacts-in-general-travel + #contacts-now stop]
  error (sentence "unimplemented for" context)
end

to  increment-contacts-due-to-group-gathering-global-metrics [ts context]
  
  increment-#contacts-per-gathering-type-global-metrics ts context
  
  ask ts [
    ask other ts [
      let key (list [age] of myself age)
      ;if age = young-age and [age] of myself = young-age [show "hey!"]
      table:put age-group-to-age-group-#contacts-table key table:get age-group-to-age-group-#contacts-table key + 1
    ]
  ]
  
  
 
end

to-report ratio-quarantiners-currently-complying-to-quarantine
  if count people with [is-officially-asked-to-quarantine?] = 0 [report 0]
  report count people with [is-officially-asked-to-quarantine? and is-in-quarantine?] / count people with [is-officially-asked-to-quarantine?]
end

to increase-people-being-severe-event-global-metrics [p]
  table:put number-of-people-per-age-having-ever-reached-severe-table [age] of p (table:get number-of-people-per-age-having-ever-reached-severe-table [age] of p + 1)
end

to-report ratio-people-having-ever-reached-severe-infection-status [a]
  report table:get number-of-people-per-age-having-ever-reached-severe-table a / #initial-people-with-age a
end

to-report #initial-people-with-age [a]
  if a = young-age [report    #youngs-at-start]
  if a = student-age [report    #students-at-start]
  if a = worker-age [report    #workers-at-start]
  if a = retired-age [report    #retireds-at-start]
end

to-report age-group-to-age-group-#contacts [infector-age infected-age]
  report table:get age-group-to-age-group-#contacts-table (list infector-age infected-age)
end