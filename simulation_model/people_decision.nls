__includes ["need_management.nls" "cultural_model.nls" "decision/quarantining.nls"]

;reports a string, which can be related to a gathering point and a concrete activity
to-report my-preferred-available-activity-descriptor 
  if log-preferred-activity-decision? [ log-file-print (sentence "Person " who " " age)]
  report item 0 reduce [[x y] -> ifelse-value item 1 x > item 1 y [x] [y]] (map [x -> (list x (global-prevalence-of x))] my-available-activity-descriptors)
  ;report reduce [[x y] -> ifelse-value global-prevalence-of x > global-prevalence-of y [x] [y]] my-available-activity-descriptors
end

to-report is-away?
  report current-activity = away-gathering-point
end


to-report travelling-reason
  report travelling-motive
end

;;here one should also include caring for children.
;;Now it's highjacking the decision process
to-report my-available-activity-descriptors
  if migration? and is-away?
  [
    if (not (random-float 1 < probability-getting-back-when-abroad)) [
      report (list (list away-gathering-point travelling-reason false))
    ]
  ]
  

  let activities (list (list my-home "rest"))

  if has-internally-visible-symptoms? or is-believing-to-be-infected?
  [ set activities lput activity-descriptor my-hospital treatment-motive activities ]

  if (slice-of-the-day = "morning" or slice-of-the-day = "afternoon") and working-day?
    [
      if is-child? [
        set activities (lput (activity-descriptor my-school  "mandatory") activities)
          ]
      if is-student?
      [
        set activities (lput (activity-descriptor my-university  "learning") activities)
      ]

      if is-worker? [
        if is-allowed-to-work-from-home? and I-know-of-working-from-home? [
          set activities (lput (activity-descriptor
            my-home
            work-motive)
            activities)
        ]
        
        set activities (lput (activity-descriptor
          my-work
          work-motive)
          activities)
      ]
  ]
  
  if slice-of-the-day = "evening" or not working-day? or age = "retired"
  [
    if age != "young" and slice-of-the-day != "night" [
      set activities lput (activity-descriptor one-of my-essential-shops "essential shopping") activities
    ]

    set activities lput (activity-descriptor my-public-leisure "relaxing" ) activities
    if age != "young" and slice-of-the-day != "night" [
      set activities lput (activity-descriptor my-non-essential-shop "shopping") activities
    ]
    set activities lput (activity-descriptor my-private-leisure "relaxing") activities

  ]

  set activities lput (list my-hospital "get-tested") activities
  set activities filter [ i -> [is-accessible?] of first i] activities

  ;show [gathering-type] of (turtle-set map [ad -> first ad] activities)


  if any? people-that-depend-on-me with [ (current-person-I-depend-on = nobody or current-person-I-depend-on = myself)
    and is-currently-in-sitation-of-active-dependence?]
  [

    ask people-that-depend-on-me [ set current-person-I-depend-on myself]
    set activities filter [ i -> can-be-done-with-a-dependable-person? i] activities
  ]
  let ret []
  foreach activities [ activity ->
    set ret fput (lput false activity) ret
    if I-know-of-social-distancing? [
      set ret fput (lput true activity) ret
    ]
  ]
  
  if is-officially-asked-to-quarantine? and is-psychorigidly-staying-at-home-when-quarantining?
  [
    set ret filter [[x] -> location-of x = my-home] ret
  ]

  report ret
end


to-report is-currently-in-sitation-of-active-dependence?
  report is-child? and closed-schools?
end



to select-activity
  let c-a my-preferred-available-activity-descriptor
  
  ;;select if migration takes over and people move around
  if (migration? and random-float 1 < probability-going-abroad) [
    set c-a (list away-gathering-point travelling-motive false)
  ]
  
  let loc location-of c-a
  select-activity-wtf? loc
  set current-activity loc
  set current-motivation motive-of c-a
  set is-I-apply-social-distancing? social-distancing-of c-a
  if current-activity != away-gathering-point and current-motivation = travelling-motive [error "wrong place while travelling"]
end

;;this function is the main bottleneck of the whole application!
;;it draws 0.2ms per call 
to select-activity-wtf? [loc]
  
 ; set is-moving-outside-for-reaching-current-activity? not (current-activity = location-of c-a)
  set is-moving-outside-for-reaching-current-activity? not (current-activity = loc)
end

to-report is-allowed-to-work-from-home?
  if not is-worker? [error "not a worker"]
  report member? [gathering-type] of my-work ["workplace" "university"]
  ;link-neighbors with [gathering-type = "workplace"]
end

to-report is-currently-watching-a-child?
  report any? [current-gatherers with [is-child?]] of current-activity
end

to-report is-currently-watched-by-an-adult?
  report any? [current-gatherers with [is-adult?]] of current-activity
end

to update-belief-based-on-current-activity
  let family-here count my-relatives with [current-activity = [current-activity] of myself]
  if any? my-relatives and family-here / count my-relatives > 0.5 [ set days-since-seen-relatives 0 ]
  
  if is-worker? 
  [
    let colleagues-here count my-colleagues with [current-activity = [current-activity] of myself]
    if (any? other my-colleagues and colleagues-here / count my-colleagues > 0.5) [ set days-since-seen-colleagues 0 ]
    if any? other my-colleagues with [I-know-of-working-from-home?] [ set I-know-of-working-from-home? true ]
  ]
  let friends-here count my-friends with [current-activity = [current-activity] of myself]
  if any? my-friends and friends-here / count my-friends > 0.5 [ set days-since-seen-friends 0 ]
  if any? other my-network with [I-know-of-social-distancing?] [ set I-know-of-social-distancing? true ]
  
  update-memory
end

to update-memory
  let network-activities new-counter

  if count my-network > 0 [
  ask my-network [
    set network-activities add-to-counter network-activities (list [gathering-type] of current-activity current-motivation)
  ]
  
    let network-activity counter-max-value network-activities
    ifelse working-day? [
      set what-my-network-did-week-day lput network-activity what-my-network-did-week-day
      if length what-my-network-did-week-day > 4 [
        set what-my-network-did-week-day but-first what-my-network-did-week-day
      ]
    ] [
      set what-my-network-did-weekend lput network-activity what-my-network-did-weekend
      if length what-my-network-did-weekend > 4 [
        set what-my-network-did-weekend but-first what-my-network-did-weekend
      ]
    ]
    set did-my-network-socially-distance? 2 * count (my-network with [is-I-apply-social-distancing?]) >= count my-network
    let quarantine-network my-network with [is-officially-asked-to-quarantine?]
    ifelse any? quarantine-network [
      set did-my-network-quarantine? 2 * count (quarantine-network with [is-in-quarantine?]) >= count quarantine-network
    ] [
      set did-my-network-quarantine? false
    ]

  
  
  set did-my-network-socially-distance? 2 * count (my-network with [is-I-apply-social-distancing?]) >= count my-network 
  
  let colleague-activity []
  if working-day? and is-worker? and count my-colleagues with [is-working?] > 0[
    
    let colleagues-at-home my-colleagues with [is-working-at-home?]
    let colleagues-at-work my-colleagues with [is-working-at-work?]
    ifelse count colleagues-at-home > count colleagues-at-work 
       [let p one-of colleagues-at-home 
        set colleague-activity list [[gathering-type] of current-activity] of p [current-motivation] of p ]
       [let p one-of colleagues-at-work
        set colleague-activity list [[gathering-type] of current-activity] of p [current-motivation] of p ]

    
    
    set what-my-colleagues-did-week-day lput colleague-activity what-my-colleagues-did-week-day
    if length what-my-colleagues-did-week-day > 4 [
      set what-my-colleagues-did-week-day but-first what-my-colleagues-did-week-day
    ]
  ]
  ]
  
end
